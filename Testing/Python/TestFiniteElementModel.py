from __future__ import division
import sys
import numpy
from numpy.core import *
import vtk
from vtk.util.numpy_support import vtk_to_numpy, numpy_to_vtk
import vtkbone
import traceback
import test_geometries
import unittest


class TestFiniteElementModel (unittest.TestCase):

    def test_name(self):
        geometry = test_geometries.generate_two_element_geometry()
        model = vtkbone.vtkboneFiniteElementModel()
        model.ShallowCopy(geometry)
        model.SetName ("JeromeKJerome")
        self.assertEqual(model.GetName(), "JeromeKJerome")


    def test_create_node_set(self):
        # Generate a model that has only geometry.
        geometry = test_geometries.generate_two_element_geometry()
        model = vtkbone.vtkboneFiniteElementModel()
        model.ShallowCopy(geometry)
        node_pedigree_array_vtk = numpy_to_vtk(arange(12), deep=1, array_type=vtk.VTK_ID_TYPE)
        model.GetPointData().SetPedigreeIds(node_pedigree_array_vtk)
        cell_pedigree_array_vtk = numpy_to_vtk(arange(2), deep=1, array_type=vtk.VTK_ID_TYPE)
        model.GetCellData().SetPedigreeIds(cell_pedigree_array_vtk)
        # Create a node set
        nodes = array((8,9,10,11))
        nodes_vtk = numpy_to_vtk(nodes, deep=1, array_type=vtk.VTK_ID_TYPE)
        nodes_vtk.SetName("TEST NODE SET")
        model.AddNodeSet(nodes_vtk)
        self.assertEqual(model.GetNodeSets().GetItem(0).GetName(), "TEST NODE SET")
        nodeids = model.GetNodeSet("TEST NODE SET")
        nodeids_vtk = vtk_to_numpy(nodeids)
        self.assertTrue(alltrue(nodes == nodeids_vtk))
        elementids_vtk = model.GetAssociatedElementsFromNodeSet("TEST NODE SET")
        self.assertFalse(elementids_vtk is None)
        elementids = vtk_to_numpy(elementids_vtk)
        elementids_ref = array((1,))
        self.assertTrue(alltrue(elementids == elementids_ref))
        dataset = model.DataSetFromNodeSet("TEST NODE SET")
        self.assertFalse(dataset is None)
        self.assertEqual(dataset.GetNumberOfPoints(), 4)
        self.assertTrue(alltrue(array((0.0,0.0,2.0)) == dataset.GetPoint(0)))
        self.assertTrue(alltrue(array((1.0,0.0,2.0)) == dataset.GetPoint(1)))
        self.assertTrue(alltrue(array((0.0,1.0,2.0)) == dataset.GetPoint(2)))
        self.assertTrue(alltrue(array((1.0,1.0,2.0)) == dataset.GetPoint(3)))
        self.assertEqual(dataset.GetPointData().GetPedigreeIds().GetValue(0), 8)
        self.assertEqual(dataset.GetPointData().GetPedigreeIds().GetValue(1), 9)
        self.assertEqual(dataset.GetPointData().GetPedigreeIds().GetValue(2), 10)
        self.assertEqual(dataset.GetPointData().GetPedigreeIds().GetValue(3), 11)
        self.assertEqual(dataset.GetNumberOfCells(), 4)
        self.assertEqual(dataset.GetCellType(0), vtk.VTK_VERTEX)
        self.assertEqual(dataset.GetCellType(1), vtk.VTK_VERTEX)
        self.assertEqual(dataset.GetCellType(2), vtk.VTK_VERTEX)
        self.assertEqual(dataset.GetCellType(3), vtk.VTK_VERTEX)
        # The following are too strict, since the order doesn't matter.
        cellPoints = vtk.vtkIdList()
        dataset.GetCellPoints(0, cellPoints)
        self.assertEqual(cellPoints.GetId(0), 0)
        dataset.GetCellPoints(1, cellPoints)
        self.assertEqual(cellPoints.GetId(0), 1)
        dataset.GetCellPoints(2, cellPoints)
        self.assertEqual(cellPoints.GetId(0), 2)
        dataset.GetCellPoints(3, cellPoints)
        self.assertEqual(cellPoints.GetId(0), 3)
        

    def test_create_element_set(self):
        # Generate a model that has only geometry.
        geometry = test_geometries.generate_two_element_geometry()
        model = vtkbone.vtkboneFiniteElementModel()
        model.ShallowCopy(geometry)
        node_pedigree_array_vtk = numpy_to_vtk(arange(12), deep=1, array_type=vtk.VTK_ID_TYPE)
        model.GetPointData().SetPedigreeIds(node_pedigree_array_vtk)
        cell_pedigree_array_vtk = numpy_to_vtk(arange(2), deep=1, array_type=vtk.VTK_ID_TYPE)
        model.GetCellData().SetPedigreeIds(cell_pedigree_array_vtk)
        # Create an element set
        elements = array((1,))
        elements_vtk = numpy_to_vtk(elements, deep=1, array_type=vtk.VTK_ID_TYPE)
        elements_vtk.SetName("TEST ELEMENT SET")
        model.AddElementSet(elements_vtk)
        self.assertEqual(model.GetElementSets().GetItem(0).GetName(), "TEST ELEMENT SET")
        elementids = model.GetElementSet("TEST ELEMENT SET")
        elementids_vtk = vtk_to_numpy(elementids)
        self.assertTrue(alltrue(elements == elementids_vtk))
        dataset = model.DataSetFromElementSet("TEST ELEMENT SET")
        self.assertFalse(dataset is None)
        self.assertEqual(dataset.GetNumberOfPoints(), 8)
        self.assertTrue(alltrue(array((0.0,0.0,1.0)) == dataset.GetPoint(0)))
        self.assertTrue(alltrue(array((1.0,0.0,1.0)) == dataset.GetPoint(1)))
        self.assertTrue(alltrue(array((0.0,1.0,1.0)) == dataset.GetPoint(2)))
        self.assertTrue(alltrue(array((1.0,1.0,1.0)) == dataset.GetPoint(3)))
        self.assertTrue(alltrue(array((0.0,0.0,2.0)) == dataset.GetPoint(4)))
        self.assertTrue(alltrue(array((1.0,0.0,2.0)) == dataset.GetPoint(5)))
        self.assertTrue(alltrue(array((0.0,1.0,2.0)) == dataset.GetPoint(6)))
        self.assertTrue(alltrue(array((1.0,1.0,2.0)) == dataset.GetPoint(7)))
        self.assertEqual(dataset.GetPointData().GetPedigreeIds().GetValue(0), 4)
        self.assertEqual(dataset.GetPointData().GetPedigreeIds().GetValue(1), 5)
        self.assertEqual(dataset.GetPointData().GetPedigreeIds().GetValue(2), 6)
        self.assertEqual(dataset.GetPointData().GetPedigreeIds().GetValue(3), 7)
        self.assertEqual(dataset.GetPointData().GetPedigreeIds().GetValue(4), 8)
        self.assertEqual(dataset.GetPointData().GetPedigreeIds().GetValue(5), 9)
        self.assertEqual(dataset.GetPointData().GetPedigreeIds().GetValue(6), 10)
        self.assertEqual(dataset.GetPointData().GetPedigreeIds().GetValue(7), 11)
        self.assertEqual(dataset.GetNumberOfCells(), 1)
        self.assertEqual(dataset.GetCellType(0), vtk.VTK_VOXEL)
        self.assertEqual(dataset.GetCellData().GetPedigreeIds().GetValue(0), 1)
        self.assertEqual(dataset.GetCellData().GetScalars().GetValue(0), 1)


    def test_create_boundary_condition(self):
        # Generate a model that has only geometry.
        geometry = test_geometries.generate_two_element_geometry()
        model = vtkbone.vtkboneFiniteElementModel()
        model.ShallowCopy(geometry)
        node_pedigree_array_vtk = numpy_to_vtk(arange(12), deep=1, array_type=vtk.VTK_ID_TYPE)
        model.GetPointData().SetPedigreeIds(node_pedigree_array_vtk)
        cell_pedigree_array_vtk = numpy_to_vtk(arange(2), deep=1, array_type=vtk.VTK_ID_TYPE)
        model.GetCellData().SetPedigreeIds(cell_pedigree_array_vtk)
        # Create a node set
        nodes = array((8,9,10,11))
        nodes_vtk = numpy_to_vtk(nodes, deep=1, array_type=vtk.VTK_ID_TYPE)
        nodes_vtk.SetName("TEST NODE SET")
        model.AddNodeSet(nodes_vtk)
        self.assertEqual(model.GetNodeSets().GetItem(0).GetName(), "TEST NODE SET")
        # Create a displacement constraint
        model.ApplyBoundaryCondition("TEST NODE SET", 2, 0.1, "TEST BOUNDARY CONDITION")
        constraint = model.GetConstraints().GetItem("TEST BOUNDARY CONDITION")
        self.assertFalse(constraint is None)
        ids_vtk = constraint.GetIndices()
        self.assertFalse(ids_vtk is None)
        ids = vtk_to_numpy(ids_vtk)
        self.assertTrue(alltrue(ids == nodes))
        senses_vtk = constraint.GetAttributes().GetArray("SENSE")
        self.assertFalse(senses_vtk is None)
        senses = vtk_to_numpy(senses_vtk)
        self.assertTrue(alltrue(senses == 2))
        values_vtk = constraint.GetAttributes().GetArray("VALUE")
        self.assertFalse(values_vtk is None)
        values = vtk_to_numpy(values_vtk)
        self.assertTrue(alltrue(values == 0.1))
        # Now we are going to add some additional data to this constraint
        nodes2 = array((0,1,2,3))
        nodes2_vtk = numpy_to_vtk(nodes2, deep=1, array_type=vtk.VTK_ID_TYPE)
        nodes2_vtk.SetName("TEST NODE SET 2")
        model.AddNodeSet(nodes2_vtk)
        self.assertEqual(model.GetNodeSets().GetItem(1).GetName(), "TEST NODE SET 2")
        model.ApplyBoundaryCondition("TEST NODE SET 2", 1, -0.1, "TEST BOUNDARY CONDITION")
        constraint = model.GetConstraints().GetItem("TEST BOUNDARY CONDITION")
        self.assertFalse(constraint is None)
        ids_vtk = constraint.GetIndices()
        self.assertFalse(ids_vtk is None)
        ids = vtk_to_numpy(ids_vtk)
        self.assertTrue(alltrue(ids[:4] == nodes))
        self.assertTrue(alltrue(ids[4:] == nodes2))
        senses_vtk = constraint.GetAttributes().GetArray("SENSE")
        self.assertFalse(senses_vtk is None)
        senses = vtk_to_numpy(senses_vtk)
        self.assertTrue(alltrue(senses[:4] == 2))
        self.assertTrue(alltrue(senses[4:] == 1))
        values_vtk = constraint.GetAttributes().GetArray("VALUE")
        self.assertFalse(values_vtk is None)
        values = vtk_to_numpy(values_vtk)
        self.assertTrue(alltrue(values[:4] == 0.1))
        self.assertTrue(alltrue(values[4:] == -0.1))
        
    def test_create_applied_load(self):
        # Generate a model that has only geometry.
        geometry = test_geometries.generate_two_element_geometry()
        model = vtkbone.vtkboneFiniteElementModel()
        model.ShallowCopy(geometry)
        node_pedigree_array_vtk = numpy_to_vtk(arange(12), deep=1, array_type=vtk.VTK_ID_TYPE)
        model.GetPointData().SetPedigreeIds(node_pedigree_array_vtk)
        cell_pedigree_array_vtk = numpy_to_vtk(arange(2), deep=1, array_type=vtk.VTK_ID_TYPE)
        model.GetCellData().SetPedigreeIds(cell_pedigree_array_vtk)
        # Create an element set
        elements = array((1,))
        elements_vtk = numpy_to_vtk(elements, deep=1, array_type=vtk.VTK_ID_TYPE)
        elements_vtk.SetName ("TEST ELEMENT SET")
        model.AddElementSet(elements_vtk)
        self.assertEqual(model.GetElementSets().GetItem(0).GetName(), "TEST ELEMENT SET")
        # Create a force constraint
        model.ApplyLoad("TEST ELEMENT SET", vtkbone.vtkboneConstraint.FACE_X1_DISTRIBUTION, 2, 0.1, "TEST FORCE CONSTRAINT")
        constraint = model.GetConstraints().GetItem("TEST FORCE CONSTRAINT")
        self.assertFalse(constraint is None)
        ids_vtk = constraint.GetIndices()
        self.assertFalse(ids_vtk is None)
        ids = vtk_to_numpy(ids_vtk)
        self.assertTrue(alltrue(ids == elements))
        distributions_vtk = constraint.GetAttributes().GetArray("DISTRIBUTION")
        self.assertFalse(distributions_vtk is None)
        distributions = vtk_to_numpy(distributions_vtk)
        self.assertTrue(alltrue(distributions == vtkbone.vtkboneConstraint.FACE_X1_DISTRIBUTION))
        senses_vtk = constraint.GetAttributes().GetArray("SENSE")
        self.assertFalse(senses_vtk is None)
        senses = vtk_to_numpy(senses_vtk)
        self.assertTrue(alltrue(senses == 2))
        values_vtk = constraint.GetAttributes().GetArray("VALUE")
        self.assertFalse(values_vtk is None)
        values = vtk_to_numpy(values_vtk)
        self.assertTrue(alltrue(values == 0.1))
        # Now we are going to add some additional data to this constraint
        model.ApplyLoad("TEST ELEMENT SET", vtkbone.vtkboneConstraint.BODY_DISTRIBUTION, 1, -0.1, "TEST FORCE CONSTRAINT")
        constraint = model.GetConstraints().GetItem("TEST FORCE CONSTRAINT")
        self.assertFalse(constraint is None)
        ids_vtk = constraint.GetIndices()
        self.assertFalse(ids_vtk is None)
        ids = vtk_to_numpy(ids_vtk)
        self.assertTrue(alltrue(ids == 1))
        distributions_vtk = constraint.GetAttributes().GetArray("DISTRIBUTION")
        self.assertFalse(distributions_vtk is None)
        distributions = vtk_to_numpy(distributions_vtk)
        self.assertTrue(alltrue(distributions == (vtkbone.vtkboneConstraint.FACE_X1_DISTRIBUTION, vtkbone.vtkboneConstraint.BODY_DISTRIBUTION)))
        senses_vtk = constraint.GetAttributes().GetArray("SENSE")
        self.assertFalse(senses_vtk is None)
        senses = vtk_to_numpy(senses_vtk)
        self.assertTrue(alltrue(senses == (2,1)))
        values_vtk = constraint.GetAttributes().GetArray("VALUE")
        self.assertFalse(values_vtk is None)
        values = vtk_to_numpy(values_vtk)
        self.assertTrue(alltrue(values == (0.1,-0.1)))

    def test_get_all_cell_points(self):
        geometry = test_geometries.generate_two_element_geometry()
        model = vtkbone.vtkboneFiniteElementModel()
        model.SetPoints (geometry.GetPoints())
        model.SetCells (geometry.GetCellTypesArray(),
                        geometry.GetCellLocationsArray(),
                        geometry.GetCells())
        allCellPoints = vtk_to_numpy(model.GetAllCellPoints())
        self.assertEqual(allCellPoints.size, 16)
        expected_allCellPoints = array((0, 1, 2, 3, 4, 5, 6, 7,
                                        4, 5, 6, 7, 8, 9, 10, 11))
        self.assertTrue(alltrue(allCellPoints == expected_allCellPoints))


if __name__ == '__main__':
    unittest.main()
